{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","todo-app/tests/acceptance/todo-test.js","todo-app/tests/app.lint-test.js","todo-app/tests/helpers/destroy-app.js","todo-app/tests/helpers/module-for-acceptance.js","todo-app/tests/helpers/resolver.js","todo-app/tests/helpers/start-app.js","todo-app/tests/test-helper.js","todo-app/tests/tests.lint-test.js","todo-app/tests/unit/adapters/application-test.js","todo-app/tests/unit/controllers/todo-test.js","todo-app/tests/unit/models/todo-test.js","todo-app/tests/unit/routes/good-reads-test.js","todo-app/tests/unit/routes/todo-test.js","todo-app/tests/unit/services/ajax-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('todo-app/tests/acceptance/todo-test', ['exports', 'qunit', 'todo-app/tests/helpers/module-for-acceptance'], function (exports, _qunit, _todoAppTestsHelpersModuleForAcceptance) {\n\n  (0, _todoAppTestsHelpersModuleForAcceptance['default'])('Acceptance | todo');\n\n  (0, _qunit.test)('visiting /todo', function (assert) {\n    visit('/todo');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/todo');\n    });\n  });\n\n  (0, _qunit.test)('Display todo', function (assert) {\n    visit('/todo');\n    andThen(function () {\n      assert.equal(find('.todo-item').length, 3);\n    });\n  });\n\n  (0, _qunit.test)('Add todo', function (assert) {\n    visit('/todo');\n    fillIn('input.add-todo', 'New todo');\n    click('[data-test-id=\"add-todo-button\"]');\n    andThen(function () {\n      assert.equal(find('.todo-item').length, 4);\n    });\n  });\n\n  (0, _qunit.test)('Add completed todo below', function (assert) {\n    visit('/todo');\n    click('input[name=\"1\"]');\n    andThen(function () {\n      assert.equal(find('.completed .todo-item').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('Delete todo', function (assert) {\n    visit('/todo');\n    click('[data-test-id=\"1\"] [data-test-id=\"delete\"]');\n    click('[data-test-id=\"3\"] [data-test-id=\"delete\"]');\n    andThen(function () {\n      assert.equal(find('.todo-item').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('Edit todo', function (assert) {\n    visit('/todo');\n    click('[data-test-id=\"2\"] [data-test-id=\"edit\"]');\n    fillIn('[data-test-id=\"2\"] input[type=\"text\"]', ' tomorrow');\n    click('[data-test-id=\"2\"] [data-test-id=\"save\"]');\n    andThen(function () {\n      assert.equal(find('[data-test-id=\"2\"] .todo-name').text().trim(), 'tomorrow');\n    });\n  });\n});","define('todo-app/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/todo-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/todo-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/good-reads.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/good-reads.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/todo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/todo.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/todo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/todo.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/good-reads.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/good-reads.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/todo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/todo.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/ajax.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass ESLint\\n\\n');\n  });\n});","define('todo-app/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('todo-app/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'todo-app/tests/helpers/start-app', 'todo-app/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _todoAppTestsHelpersStartApp, _todoAppTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _todoAppTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _todoAppTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('todo-app/tests/helpers/resolver', ['exports', 'todo-app/resolver', 'todo-app/config/environment'], function (exports, _todoAppResolver, _todoAppConfigEnvironment) {\n\n  var resolver = _todoAppResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _todoAppConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _todoAppConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('todo-app/tests/helpers/start-app', ['exports', 'ember', 'todo-app/app', 'todo-app/config/environment'], function (exports, _ember, _todoAppApp, _todoAppConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _todoAppConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _todoAppApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('todo-app/tests/test-helper', ['exports', 'todo-app/tests/helpers/resolver', 'ember-qunit'], function (exports, _todoAppTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_todoAppTestsHelpersResolver['default']);\n});","define('todo-app/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/todo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/todo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/todo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/todo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/todo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/todo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/good-reads-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/good-reads-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/todo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/todo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ajax-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass ESLint\\n\\n');\n  });\n});","define('todo-app/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('todo-app/tests/unit/controllers/todo-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:todo', 'Unit | Controller | todo', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('todo-app/tests/unit/models/todo-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('todo', 'Unit | Model | todo', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('todo-app/tests/unit/routes/good-reads-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:good-reads', 'Unit | Route | good reads', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('todo-app/tests/unit/routes/todo-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:todo', 'Unit | Route | todo', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('todo-app/tests/unit/services/ajax-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('todo-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}